<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jaxws="http://cxf.apache.org/jaxws"
       xmlns:cxf="http://cxf.apache.org/core"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd
            http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
            http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd">


    <!-- probably should move this to webapp ctx.  needed to autowire spring beans into jersey rest services -->
    <context:component-scan base-package="com.hlc" />

    <!-- needed to explicitly kick off the ws-at transactional subsystem since we are running outside j2ee container -->
    <bean id="txnService" class="org.jboss.jbossts.XTSService" init-method="start"/>


    <!-- Enabling Interceptors -->
    <bean id="logInbound" class="org.apache.cxf.interceptor.LoggingInInterceptor"/>
    <bean id="logOutbound" class="org.apache.cxf.interceptor.LoggingOutInterceptor"/>

    <!-- Enabling message logging using custom CXF bean elements -->
    <cxf:bus>
        <cxf:inInterceptors>
            <ref bean="logInbound"/>
        </cxf:inInterceptors>
        <cxf:outInterceptors>
            <ref bean="logOutbound"/>
        </cxf:outInterceptors>
        <cxf:outFaultInterceptors>
            <ref bean="logOutbound"/>
        </cxf:outFaultInterceptors>
        <cxf:inFaultInterceptors>
            <ref bean="logInbound"/>
        </cxf:inFaultInterceptors>
    </cxf:bus>

    <import resource="classpath:META-INF/cxf/cxf.xml"/>
    <import resource="classpath:META-INF/cxf/cxf-servlet.xml"/>
    <jaxws:endpoint id="txnSoapService" implementor="com.hlc.soap.TestTxnSoapServiceImpl" address="/txnSoapService">
        <jaxws:properties>
            <entry key="faultStackTraceEnabled" value="true" />
            <entry key="exceptionMessageCauseEnabled" value="true" />
        </jaxws:properties>

        <jaxws:handlers>
            <bean class="org.jboss.jbossts.txbridge.inbound.JaxWSTxInboundBridgeHandler" />  <!-- this used to be before the header ctx processor -->
            <!--<bean class="org.jboss.jbossts.txbridge.inbound.OptionalJaxWSTxInboundBridgeHandler" />-->
            <bean class="com.arjuna.mw.wst11.service.JaxWSHeaderContextProcessor" />
            <!--<bean class="com.arjuna.mw.wst11.service.JaxWSSubordinateHeaderContextProcessor" />-->
        </jaxws:handlers>
    </jaxws:endpoint>


    <!-- ws-at participant service (for our web services) -->
    <jaxws:endpoint id="wsatParticipantService" implementor="com.arjuna.webservices11.wsat.sei.ParticipantPortTypeImpl" address="/ParticipantService"/>

    <!-- ws-at coordination services -->
    <jaxws:endpoint id="wsatCompCoordService" implementor="com.arjuna.webservices11.wsat.sei.CompletionCoordinatorPortTypeImpl" address="/CompletionCoordinatorService"/>
    <jaxws:endpoint id="wsatCoordService" implementor="com.arjuna.webservices11.wsat.sei.CoordinatorPortTypeImpl" address="/CoordinatorService"/>
    <jaxws:endpoint id="wsatActivationService" implementor="com.arjuna.webservices11.wscoor.sei.ActivationPortTypeImpl" address="/ActivationService"/>
    <jaxws:endpoint id="wsatRegistrationService" implementor="com.arjuna.webservices11.wscoor.sei.RegistrationPortTypeImpl" address="/RegistrationService"/>

    <!-- ws-at client services (i think we could use the RPC service and avoid exposing this endpoint) -->
    <jaxws:endpoint id="wsatCompletionInitService" implementor="com.arjuna.webservices11.wsat.sei.CompletionInitiatorPortTypeImpl" address="/CompletionInitiatorService"/>
    <jaxws:endpoint id="wsatCompletionCoordRPCService" implementor="com.arjuna.webservices11.wsat.sei.CompletionCoordinatorRPCPortTypeImpl" address="/CompletionCoordinatorRPCService"/>



    <jaxws:client id="testClientLocal"
                  address="http://localhost:8181/ws/txnSoapService"
                  serviceClass="com.hlc.soap.TestTxnSoapService" >
        <jaxws:handlers>
            <bean class="com.arjuna.mw.wst11.client.JaxWSHeaderContextProcessor" />
        </jaxws:handlers>
    </jaxws:client>

    <jaxws:client id="testClientRemote"
                  address="http://localhost:8181/ws/txnSoapService"
                  serviceClass="com.hlc.soap.TestTxnSoapService" >
        <jaxws:handlers>
            <bean class="org.jboss.jbossts.txbridge.outbound.JaxWSTxOutboundBridgeHandler" />
            <bean class="com.arjuna.mw.wst11.client.JaxWSHeaderContextProcessor" />
        </jaxws:handlers>
    </jaxws:client>


    <!-- initiator service whose sole function is to expose an entry point so that 'testClientLocal' initiates ws-at
        transaction within the process which is hosting all xts soap services.  hack which really needs to go away -->
    <jaxws:endpoint id="txnInitiatorService" implementor="com.hlc.soap.TxnInitiatorServiceImpl" address="/initiatorService">
        <jaxws:properties>
            <entry key="faultStackTraceEnabled" value="true" />
            <entry key="exceptionMessageCauseEnabled" value="true" />
        </jaxws:properties>
    </jaxws:endpoint>

    <jaxws:client id="initiatorClient"
                  address="http://localhost:8181/ws/initiatorService"
                  serviceClass="com.hlc.soap.TxnInitiatorService" >
    </jaxws:client>


</beans>