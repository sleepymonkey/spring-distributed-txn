<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">


    <context:annotation-config/>
    <tx:annotation-driven />


    <bean id="hlc-persistence-property-config" class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:hlc-persistence.properties</value>
                <value>file:///opt/software/deployment/hlc-environment.properties</value>
            </list>
        </property>
        <property name="ignoreResourceNotFound" value="true" />
        <property name="ignoreUnresolvablePlaceholders" value="true"/>  <!-- don't fail if this configurer can't resolve placeholders in other ctx files -->
    </bean>


    <bean id="jbossTransactionManager" class="com.arjuna.ats.jta.TransactionManager" factory-method="transactionManager"/>
    <bean id="jbossUserTransaction" class="com.arjuna.ats.jta.UserTransaction" factory-method="userTransaction"/>


    <bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
        <property name="transactionManager"><ref bean="jbossTransactionManager"/></property>
        <property name="userTransaction"><ref bean="jbossUserTransaction"/></property>
    </bean>

    <bean id="mysqlXADataSource" class="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource">
        <property name="user" value="${hlc.jdbc.username}"/>
        <property name="password" value="${hlc.jdbc.password}"/>
        <property name="url" value="${hlc.jdbc.url}"/>
    </bean>

    <bean id="dsXAConnectionFactory" class="org.apache.commons.dbcp.managed.DataSourceXAConnectionFactory">
        <constructor-arg><ref bean="jbossTransactionManager"/></constructor-arg>
        <constructor-arg><ref bean="mysqlXADataSource"/></constructor-arg>
    </bean>

    <bean id="pool" class="org.apache.commons.pool.impl.GenericObjectPool">
        <property name="maxActive" value="20"/>
        <property name="minIdle" value="10"/>
    </bean>

    <bean id="poolableConnectionFactory" class="org.apache.commons.dbcp.PoolableConnectionFactory">
        <constructor-arg index="0"><ref bean="dsXAConnectionFactory"></ref></constructor-arg>
        <constructor-arg index="1"><ref bean="pool"></ref></constructor-arg>
        <constructor-arg index="2"><null></null></constructor-arg>
        <constructor-arg index="3"><null></null></constructor-arg>
        <constructor-arg index="4"><value>false</value></constructor-arg>
        <constructor-arg index="5"><value>true</value></constructor-arg>
    </bean>


    <bean id="dataSource" class="org.apache.commons.dbcp.managed.ManagedDataSource" depends-on="poolableConnectionFactory">
        <constructor-arg index="0"><ref bean="pool"/></constructor-arg>
        <constructor-arg index="1" value="#{dsXAConnectionFactory.getTransactionRegistry()}"></constructor-arg>
    </bean>

    <bean id="jdbcObjDao" class="com.hlc.dao.impl.JdbcObjectDaoImpl">
        <property name="dataSource" ref="dataSource"/>
    </bean>



    <!-- hibernate/jpa stuff.  can't remember if this works.  keeping here for the time being... -->

    <!--<bean id="hlcDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">-->
        <!--<property name="driverClass" value="${hlc.jdbc.driver}"/>-->
        <!--<property name="jdbcUrl" value="${hlc.jdbc.url}"/>-->
        <!--<property name="user" value="${hlc.jdbc.username}"/>-->
        <!--<property name="password" value="${hlc.jdbc.password}"/>-->
        <!--&lt;!&ndash; Pool properties &ndash;&gt;-->
        <!--<property name="minPoolSize" value="5"/>-->
        <!--<property name="maxPoolSize" value="10"/>-->
        <!--<property name="maxStatements" value="50"/>-->
        <!--<property name="idleConnectionTestPeriod" value="120"/>-->
        <!--<property name="maxIdleTime" value="600"/>-->
        <!--<property name="unreturnedConnectionTimeout" value="3600"/>-->
    <!--</bean>-->

    <!--<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">-->
        <!--<property name="entityManagerFactory" ref="entityManager"/>-->
    <!--</bean>-->

    <!--<bean id="entityManager" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">-->
        <!--&lt;!&ndash;<property name="dataSource" ref="dataSource"/>&ndash;&gt;-->
        <!--<property name="packagesToScan" value="com.hlc.entity"/>-->
        <!--<property name="persistenceProviderClass" value="org.hibernate.ejb.HibernatePersistence"/>-->
        <!--<property name="jpaProperties" ref="jpaProperties"/>-->
        <!--&lt;!&ndash; new &ndash;&gt;-->
        <!--<property name="jpaVendorAdapter">-->
            <!--<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>-->
        <!--</property>-->
        <!--&lt;!&ndash; end new &ndash;&gt;-->
    <!--</bean>-->

    <!--<bean id="jpaProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">-->
        <!--<property name="properties">-->
            <!--<props>-->
                <!--<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>-->
                <!--<prop key="hibernate.show_sql">true</prop>-->
                <!--<prop key="hibernate.format_sql">true</prop>-->
                <!--<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>-->
                <!--<prop key="hibernate.cache.use_query_cache">false</prop>-->
                <!--<prop key="hibernate.cache.use_second_level_cache">false</prop>-->
                <!--&lt;!&ndash; new &ndash;&gt;-->
                <!--<prop key="javax.persistence.transactionType">jta</prop>-->
                <!--&lt;!&ndash;<prop key="hibernate.transaction.manager_lookup_class">org.hibernate.service.jta.platform.internal.JBossStandAloneJtaPlatform></prop>&ndash;&gt;-->
                <!--<prop key="hibernate.transaction.jta.platform">org.hibernate.engine.transaction.jta.platform.internal.JBossStandAloneJtaPlatform></prop>-->
                <!--&lt;!&ndash;<prop key="transact ion.jta.platform">&ndash;&gt;-->
                    <!--&lt;!&ndash;org.hibernate.service.jta.platform.internal.JBossStandAloneJtaPlatform&ndash;&gt;-->
                <!--&lt;!&ndash;</prop>&ndash;&gt;-->
                <!--&lt;!&ndash;end new&ndash;&gt;-->
            <!--</props>-->
        <!--</property>-->
    <!--</bean>-->

    <!--<bean id="userRoleDao" class="com.hlc.dao.impl.UserRoleDaoImpl"/>-->


    <!--
    check this out for potentially writing property files to system properties:
    http://stackoverflow.com/questions/4116681/how-to-load-system-properties-file-in-spring

    <bean id="systemPropertiesLoader" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetObject" value="#{@systemProperties}" />
        <property name="targetMethod" value="putAll" />
        <property name="arguments">
            <util:properties location="classpath:override.properties" />
        </property>
    </bean>


    this apparently works:
    <bean id="persistenceSystemProps" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetObject">
            <bean class="java.lang.System" factory-method="getProperties"/>
        </property>
        <property name="targetMethod" value="putAll"/>
        <property name="arguments" ref="persistenceProps"/>
    </bean>

    <bean id="atomikosJtaProps" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="properties">
            <props>
                <prop key="com.atomikos.icatch.no_file">true</prop>
                <prop key="com.atomikos.icatch.hide_init_file_path">true</prop>
                <prop key="com.atomikos.icatch.service">com.atomikos.icatch.standalone.UserTransactionServiceFactory</prop>
                <prop key="com.atomikos.icatch.log_base_dir">/opt/txlogs</prop>
            </props>
        </property>
    </bean>
-->

 
</beans>
